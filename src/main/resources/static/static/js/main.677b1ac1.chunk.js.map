{"version":3,"sources":["components/SwedishCard.jsx","util/IndexCardUtil.js","service/SvenskaSeService.js","components/indexcards/IndexCardEdit.jsx","repository/lectureRepository.js","components/indexcards/IndexCardSmall.jsx","components/StickyNavigation.jsx","components/LectureEdit.jsx","domain/lectureReducer.js","components/LectureOverview.jsx","components/Swipeable.jsx","components/indexcards/IndexCardQuiz.jsx","components/quiz/YesNoQuiz.jsx","repository/lectureResultRepository.js","App.js","serviceWorker.js","index.js"],"names":["adjectiveFieldsToLabel","singular_utrum_indefinite","singular_neutrum_indefinite","singular_definite","plural","comparative","superlative","nounFieldsToLabel","singular_indefinite","noun_type","plural_indefinite","plural_definite","verbFieldsToLabel","infinitive","present_tense","preterite","imperative","supinum","SwedishCard","fieldToLabel","_class","_temp","editable","arguments","length","undefined","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","value","_this$props","props","data","onChange","objectWithoutProperties","className","react_default","a","createElement","assign","entries","map","_ref","index","_ref2","slicedToArray","dataField","label","autoFocus","Component","IDENTIFIER","keys","defaultProps","AdjectiveCard","NounCard","VerbCard","FreeTextCard","AdjectiveCardEdit","NounCardEdit","VerbCardEdit","FreeTextCardEdit","WORDTYPES","FREE_TEXT","VERB","ADJECTIVE","NOUN","getEditComponentByWordtype","wordtype","request","require","parse","_","getUrlFromQuery","query","process","REACT_APP_SVENSKASE_PROXY","document","location","origin","encodeURIComponent","trim","split","join","TYPE_NOT_FOUND_EXCEPTION","WORD_TYPES","substantiv","adjektiv","verb","other","buildVerb","root","result","cases","querySelectorAll","e","text","finiteIndex","Math","max","indexOf","infiniteIndex","presensParticipIndex","i","replace","buildAdjective","positiveIndex","comparativeIndex","superlativeIndex","_cases$i$split","_cases$i$split2","indicator","form","includes","_cases$_i2$split","_cases$_i2$split2","buildNoun","querySelector","singularIndex","pluralIndex","processSvenskaSeRequest","error","response","body","expectedWordType","console","log","wordType","rootOfWordType","forms","wordTypes","lemma","foundWordType","foundWordTypeTokens","determineWordType","toUpperCase","IndexCardEdit","_React$Component","_this","call","defaultState","cloneDeep","state","callback","update","objectSpread","_this2","identifyingWord","swedish","onError","_url$headers","url","headers","Content-Type","Origin","options","getResult","setState","ev","newWordType","target","field","JSON","stringify","onSave","ctrlKey","preventDefault","autofill","saveCard","altKey","handleWordtypeChange","focusInput","focus","preventScroll","_this3","german","Boolean","SwedishComponent","tabIndex","onKeyDown","handleShortcuts","bind","toLowerCase","ref","handleChangeInSwedish","onClick","React","URL","getById","id","onSuccess","statusCode","_JSON$parse","index_cards","lecture","indexCards","startsWith","IndexCardSmall","isFocused","onClickDelete","StickyNavigation","collapsed","children","LectureEdit","currentId","getLectureId","match","params","lectureId","currentIndexCard","successful","name","description","nameInput","descriptionInput","loadIndexCards","prevProps","currentNumIndexCards","previousNumIndexCards","min","window","scrollTo","top","addIndexCard","history","push","setTimeout","_this4","post","save","filter","it","card","concat","toConsumableArray","values","onSaveSuccess","onSaveFailure","resetIndexCards","saveButtonBackgroundColor","_this5","updateIndexCard","deleteIndexCard","_this$state","components_StickyNavigation","style","background","saveLecture","goBackToOverview","display","gridTemplateColumns","marginBottom","marginTop","IndexCardEdit_IndexCardEdit","onAddCard","indexCard","IndexCardSmall_IndexCardSmall","behavior","withRouter","connect","dispatch","type","DEFAULT_INDEX_CARD","lectureReducer","action","newState","splice","LectureMeta","onClickEdit","onClickStart","LectureOverview","snackMeta","lectureMeta","lectures","get","loadLectures","errorBody","lectureMetas","metaInfo","LectureOverview_LectureMeta","Swipeable","touchDownX","touches","screenX","onTouchStart","touchUp","changedTouches","abs","onSwipeRight","onSwipeLeft","onTouchEnd","givenProps","IndexCardQuiz","quiztype","getDisplayComponentByWordtype","YesNoQuizResult","correct","wrong","redoQuiz","goBack","parseInt","gridColumnStart","gridColumnEnd","width","YesNoQuiz","unfinished","isTurned","newRound","fetch","method","then","catch","sendResult","shuffle","nextCard","turnCard","wasRight","_this$state$unfinishe","toArray","currentCard","slice","classname","_this$state2","components_Swipeable","getElementById","onTouchDown","IndexCardQuiz_IndexCardQuiz","float","YesNoQuiz_YesNoQuizResult","_default","loaded","_this$state3","YesNoQuiz_YesNoQuiz","App","es","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","react_router_dom","react_router","path","component","Lecture","hostname","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.677b1ac1.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport * as PropTypes from \"prop-types\";\r\n\r\nconst adjectiveFieldsToLabel = {\r\n    singular_utrum_indefinite: \"Sg. u. obest.\",\r\n    singular_neutrum_indefinite: \"Sg. n. obest.\",\r\n    singular_definite: \"Sg. best.\",\r\n    plural: \"Pl.\",\r\n    comparative: \"Comp.\",\r\n    superlative: \"Sup.\"\r\n}\r\n\r\nconst nounFieldsToLabel = {\r\n    singular_indefinite: \"Sg. obest.\",\r\n    noun_type: \"en/ett\",\r\n    singular_definite: \"Sg. best.\",\r\n    plural_indefinite: \"Pl. obest.\",\r\n    plural_definite: \"Pl. best.\"\r\n}\r\n\r\nconst verbFieldsToLabel = {\r\n    infinitive: \"Inf.\",\r\n    present_tense: \"Presens\",\r\n    preterite: \"Pret.\",\r\n    imperative: \"Imp.\",\r\n    supinum: \"Supinum\"\r\n}\r\n\r\nconst SwedishCard = (fieldToLabel, editable=false) => class extends Component {\r\n    static IDENTIFIER = Object.keys(fieldToLabel)[0]\r\n\r\n    render() {\r\n        let {data, onChange, ...props} = this.props;\r\n        let className = \"index-card swedish\"\r\n        if (editable)\r\n            className += \" edit\"\r\n\r\n        return <div {...props} className={className}>\r\n            {\r\n                Object.entries(fieldToLabel).map(([dataField, label], index) => [\r\n                    <label key={label}>{label}</label>,\r\n\r\n                    editable ? <input key={\"input_\" + label} value={data[dataField] || \"\"} onChange={onChange(dataField)}\r\n                           autoFocus={index === 0}\r\n                    /> : <div key={\"display_\" + label}>{data[dataField] || \"\"}</div>\r\n                ])\r\n            }\r\n        </div>;\r\n    }\r\n}\r\n\r\nSwedishCard.propTypes = {\r\n    data: PropTypes.any,\r\n    onChange: PropTypes.any\r\n}\r\nSwedishCard.defaultProps = {\r\n    onChange: () => () => null\r\n}\r\n\r\n\r\nexport const AdjectiveCard = SwedishCard(adjectiveFieldsToLabel)\r\nexport const NounCard = SwedishCard(nounFieldsToLabel)\r\nexport const VerbCard = SwedishCard(verbFieldsToLabel)\r\nexport const FreeTextCard = SwedishCard({value: \"Freitext\"})\r\n\r\nexport const AdjectiveCardEdit = SwedishCard(adjectiveFieldsToLabel, true)\r\nexport const NounCardEdit = SwedishCard(nounFieldsToLabel, true)\r\nexport const VerbCardEdit = SwedishCard(verbFieldsToLabel, true)\r\nexport const FreeTextCardEdit = SwedishCard({value: \"Freitext\"}, true)","import {\r\n    AdjectiveCard,\r\n    AdjectiveCardEdit,\r\n    FreeTextCard,\r\n    FreeTextCardEdit, NounCard,\r\n    NounCardEdit,\r\n    VerbCard,\r\n    VerbCardEdit\r\n} from \"../components/SwedishCard\";\r\n\r\nexport const WORDTYPES = {\r\n    FREE_TEXT: \"FREE_TEXT\",\r\n    VERB: \"VERB\",\r\n    ADJECTIVE: \"ADJ\",\r\n    NOUN: \"NOUN\"\r\n}\r\n\r\nexport const cardIsEmpty = (card) => !Boolean(\r\n    [card.german, ...Object.values(card.swedish)].filter(e => e !== \"\").length\r\n)\r\n\r\nexport function getEditComponentByWordtype(wordtype) {\r\n    switch (wordtype) {\r\n        case WORDTYPES.FREE_TEXT:\r\n            return FreeTextCardEdit\r\n        case WORDTYPES.VERB:\r\n            return VerbCardEdit\r\n        case WORDTYPES.ADJECTIVE:\r\n            return AdjectiveCardEdit\r\n        case WORDTYPES.NOUN:\r\n            return NounCardEdit\r\n        default:\r\n            return () => null\r\n    }\r\n}\r\n\r\nexport function getDisplayComponentByWordtype(wordtype) {\r\n    switch (wordtype) {\r\n        case WORDTYPES.FREE_TEXT:\r\n            return FreeTextCard\r\n        case WORDTYPES.VERB:\r\n            return VerbCard\r\n        case WORDTYPES.ADJECTIVE:\r\n            return AdjectiveCard\r\n        case WORDTYPES.NOUN:\r\n            return NounCard\r\n        default:\r\n            return () => null\r\n    }\r\n}","const request = require(\"request\")\r\nconst { parse } = require('node-html-parser')\r\nconst _ = require(\"lodash\")\r\n\r\nconst getUrlFromQuery = query => (process.env.REACT_APP_SVENSKASE_PROXY || document.location.origin) + \"/svenskase?sok=\"\r\n    + encodeURIComponent(query.trim().split(/\\s/).join(\"+\"))\r\n\r\nexport const TYPE_NOT_FOUND_EXCEPTION = \"Wanted type not found.\"\r\n\r\nconst WORD_TYPES = {\r\n    substantiv: \"NOUN\",\r\n    adjektiv: \"ADJ\",\r\n    verb: \"VERB\",\r\n    other: \"OTHER\"\r\n}\r\n\r\nexport function determineWordType(root) {\r\n    const foundWordType = root.querySelector(\"a.ordklass\")\r\n    if (!foundWordType)\r\n        return \"OTHER\"\r\n\r\n    const foundWordTypeTokens = foundWordType.text.split(/\\s/)\r\n    if (_.includes(foundWordTypeTokens, \"substantiv\"))\r\n        return WORD_TYPES.substantiv\r\n    if (_.includes(foundWordTypeTokens, \"adjektiv\"))\r\n        return WORD_TYPES.adjektiv\r\n    if (_.includes(foundWordTypeTokens, \"verb\"))\r\n        return WORD_TYPES.verb\r\n\r\n    return \"UNKOWN\"\r\n}\r\n\r\nexport function buildVerb(root) {\r\n    const result = {}\r\n\r\n    const cases = root.querySelectorAll(\".tabell tr *\").map(e => e.text.trim())\r\n\r\n    const finiteIndex = Math.max(cases.indexOf(\"Finita former\"), 0)\r\n    const infiniteIndex = Math.max(cases.indexOf(\"Infinita former\"), 0)\r\n    const presensParticipIndex = Math.max(cases.indexOf(\"Presens particip\"), 0)\r\n\r\n    // finites\r\n    for (let i = finiteIndex + 2; i < infiniteIndex; i += 2) {\r\n        if (cases[i] === \"presens aktiv\")\r\n            result.present_tense = cases[i-1]\r\n        else if (cases[i] === \"preteritum aktiv\")\r\n            result.preterite = cases[i-1]\r\n        else if (cases[i] === \"imperativ aktiv\")\r\n            result.imperative = cases[i-1]\r\n    }\r\n\r\n    // infinites\r\n    for (let i = infiniteIndex + 2; i < presensParticipIndex; i += 2) {\r\n        if (cases[i] === \"infinitiv aktiv\")\r\n            result.infinitive = cases[i-1].replace(\"att\", \"\").trim()\r\n        else if (cases[i] === \"supinum aktiv\")\r\n            result.supinum = cases[i-1].replace(\"har/hade\", \"\").trim()\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nexport function buildAdjective(root) {\r\n    const result = {}\r\n\r\n    const cases = root.querySelectorAll(\".tabell tr *\").map(e => e.text.split(\"+\")[0].trim())\r\n\r\n    const positiveIndex = Math.max(cases.indexOf(\"Positiv\"), 0)\r\n        || Math.max(cases.indexOf(\"Ordform(er)\"), 0)\r\n        || Math.max(cases.indexOf(\"Perfekt particip\"), 0) // build adjective from verb\r\n    const comparativeIndex = Math.max(cases.indexOf(\"Komparativ\"), 0)\r\n    const superlativeIndex = cases.indexOf(\"Superlativ\")\r\n\r\n    // positives\r\n    for (let i = positiveIndex + 1; i < (comparativeIndex || cases.length); i += 1) {\r\n        let [indicator, form] = cases[i].split(/\\s/)\r\n        indicator = indicator.split(\"/\")\r\n\r\n\r\n        if (_.includes(indicator, \"en\"))\r\n            result.singular_utrum_indefinite = form\r\n        if (_.includes(indicator, \"ett\"))\r\n            result.singular_neutrum_indefinite = form\r\n        if (_.includes(indicator, \"de\"))\r\n            result.plural = form\r\n        if (_.includes(indicator, \"den\") && _.includes(indicator, \"det\"))\r\n            result.singular_definite = form\r\n    }\r\n\r\n    // komparatives\r\n    result.comparative = cases[comparativeIndex + 1].split(/\\s/)[1]\r\n\r\n    // superlatives\r\n    for (let i = superlativeIndex + 1; i < cases.length; i += 1) {\r\n        let [indicator, form] = cases[i].split(/\\s/)\r\n        if (indicator === \"är\") {\r\n            result.superlative = form\r\n            break;\r\n        }\r\n    }\r\n\r\n    // no comparative and superlative\r\n    if (comparativeIndex === 0 && superlativeIndex === -1) {\r\n        result.comparative = \"\"\r\n        result.superlative = \"\"\r\n    }\r\n\r\n    // e.g. \"fel\" has no comparative and no positives, only one form: \"fel\"\r\n    if (positiveIndex === cases.length - 2) {\r\n        result.singular_definite = cases[positiveIndex + 1]\r\n        result.singular_utrum_indefinite = cases[positiveIndex + 1]\r\n        result.singular_neutrum_indefinite = cases[positiveIndex + 1]\r\n        result.plural = cases[positiveIndex + 1]\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nexport function buildNoun(root) {\r\n    const result = {}\r\n\r\n    const cases = root.querySelectorAll(\".tabell tr *\").map(e => e.text.trim())\r\n\r\n    result.noun_type = root.querySelector(\".ordform i\").text\r\n\r\n    const singularIndex = Math.max(cases.indexOf(\"Singular\"), 0)\r\n    const pluralIndex = Math.max(cases.indexOf(\"Plural\"), 0)\r\n\r\n    // singulars\r\n    for (let i = singularIndex + 2; i < pluralIndex; i += 2) {\r\n        if (cases[i] === \"obestämd form\")\r\n            result.singular_indefinite = cases[i-1].replace(result.noun_type, \"\").trim()\r\n        else if (cases[i] === \"bestämd form\")\r\n            result.singular_definite = cases[i-1]\r\n    }\r\n\r\n    // plural\r\n    for (let i = pluralIndex + 2; i < cases.length; i += 2) {\r\n        if (cases[i] === \"obestämd form\")\r\n            result.plural_indefinite = cases[i-1].replace(result.noun_type, \"\").trim()\r\n        else if (cases[i] === \"bestämd form\")\r\n            result.plural_definite = cases[i-1]\r\n    }\r\n\r\n    return result\r\n}\r\n\r\nexport function processSvenskaSeRequest(error, response, body, expectedWordType) {\r\n    if (error)\r\n        console.log(\"ERROR:\", error)\r\n\r\n    const forms = parse(body).querySelectorAll(\".lemma\")\r\n    const wordTypes = forms.map(lemma => determineWordType(lemma))\r\n\r\n    console.log(\"Found wordtypes\", wordTypes)\r\n\r\n    let wordType\r\n    let rootOfWordType\r\n    if (expectedWordType) {\r\n        rootOfWordType = forms[wordTypes.indexOf(expectedWordType.toUpperCase())]\r\n\r\n        if (rootOfWordType === undefined) {\r\n            if (expectedWordType.toUpperCase() === \"ADJ\" && _.includes(wordTypes, \"VERB\")) // adjective not found but verb (which can be adjectivatated) is there\r\n                rootOfWordType = forms[wordTypes.indexOf(\"VERB\")]\r\n            else if (_.includes(wordTypes, \"OTHER\")) {\r\n                console.log(\"Expected word type not found, try to work with the OTHER entry\")\r\n                rootOfWordType = forms[wordTypes.indexOf(\"OTHER\")]\r\n            } else\r\n                throw TYPE_NOT_FOUND_EXCEPTION\r\n        }\r\n\r\n        wordType = expectedWordType.toUpperCase()\r\n    } else if (forms.length === 1) {\r\n        [rootOfWordType, wordType] = [forms[0], wordTypes[0]]\r\n    } else {\r\n        [rootOfWordType, wordType] = [forms[0], wordTypes[0]]\r\n        console.log(\"No expected word type, using first lemma of type '\" + wordType + \"'\")\r\n    }\r\n\r\n    switch (wordType) {\r\n        case \"ADJ\":\r\n            return [\"ADJ\", buildAdjective(rootOfWordType)]\r\n        case \"NOUN\":\r\n            return [\"NOUN\", buildNoun(rootOfWordType)]\r\n        case \"VERB\":\r\n            return [\"VERB\", buildVerb(rootOfWordType)]\r\n        case \"UNKNOWN\":\r\n            throw Object(\"Wordtype 'UNKNOWN'.\")\r\n        default:\r\n            throw Object(\"Unknown wordtype '\" + wordType + \"'\")\r\n    }\r\n}\r\n\r\nexport function getResult(query, expectedWordType, callback=(() => null), onError=(() => null)) {\r\n    const {url, ...options} = {\r\n        url: getUrlFromQuery(query),\r\n        headers: {\r\n            \"Content-Type\": \"text/plain\",\r\n            \"Origin\": \"svenska.se\",\r\n            //\"Accept\": \"text/html; charset=UTF-8\"\r\n        }\r\n    }\r\n\r\n    console.log(\"Sending request to\", url)\r\n\r\n    request(url, options,(error, response, body) => {\r\n        try {\r\n            const result = processSvenskaSeRequest(error, response, body, expectedWordType)\r\n            callback(result)\r\n        } catch(error) {\r\n            onError(error)\r\n        }\r\n    })\r\n}\r\n","import React from \"react\";\r\nimport _ from \"lodash\";\r\nimport {getEditComponentByWordtype, WORDTYPES} from \"../../util/IndexCardUtil\";\r\nimport {getResult} from \"../../service/SvenskaSeService\";\r\n\r\nexport class IndexCardEdit extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.defaultState = _.cloneDeep(props)\r\n    }\r\n\r\n    setState(state, callback) {\r\n        this.props.update({\r\n            ...this.props,\r\n            ...state\r\n        })\r\n    }\r\n\r\n    autofill() {\r\n        let identifyingWord = this.props.swedish[getEditComponentByWordtype(this.props.wordtype).IDENTIFIER];\r\n\r\n        if (!identifyingWord)\r\n            return\r\n\r\n        identifyingWord = identifyingWord.replace(/^att /, \"\")\r\n            .replace(/^en /, \"\")\r\n            .replace(/^ett /, \"\")\r\n\r\n        return getResult(identifyingWord, this.props.wordtype,\r\n            ([_, data]) => this.setState({swedish: data}),\r\n            error => console.error(\"Could not autofill:\", error)\r\n        )\r\n    }\r\n\r\n    handleWordtypeChange(ev, wordtype) {\r\n        let newWordType = ev.target.value || wordtype\r\n        if (newWordType === this.props.wordtype)\r\n            return\r\n\r\n        this.setState({wordtype: newWordType, swedish: {}})\r\n    }\r\n\r\n    handleChangeInSwedish(field, ev) {\r\n        const swedish = JSON.parse(JSON.stringify(this.props.swedish))\r\n        swedish[field] = ev.target.value\r\n\r\n        this.setState({swedish})\r\n    }\r\n\r\n    saveCard() {\r\n        this.props.onSave()\r\n    }\r\n\r\n    handleShortcuts(ev) {\r\n        if (ev.ctrlKey) {\r\n            if (ev.key === \"Enter\") {\r\n                ev.preventDefault()\r\n                this.autofill()\r\n            }\r\n            if (ev.key === \"s\") {\r\n                ev.preventDefault()\r\n                this.saveCard()\r\n            }\r\n        } else if (ev.altKey) {\r\n            if (ev.key === \"v\") {\r\n                ev.preventDefault()\r\n                this.handleWordtypeChange({target: {value: WORDTYPES.VERB}})\r\n            }\r\n            if (ev.key === \"a\") {\r\n                ev.preventDefault()\r\n                this.handleWordtypeChange({target: {value: WORDTYPES.ADJECTIVE}})\r\n            }\r\n            if (ev.key === \"n\") {\r\n                ev.preventDefault()\r\n                this.handleWordtypeChange({target: {value: WORDTYPES.NOUN}})\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.focusInput)\r\n            this.focusInput.focus({ //simulate autofocus without the scrolling\r\n                preventScroll: true\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const {german, wordtype, swedish} = this.props\r\n        if (!Boolean(wordtype))\r\n            return <div/>\r\n\r\n        const SwedishComponent = getEditComponentByWordtype(wordtype);\r\n\r\n        return <div tabIndex={1} onKeyDown={this.handleShortcuts.bind(this)}>\r\n            <select value={wordtype} onChange={this.handleWordtypeChange.bind(this)}>\r\n                <option value={WORDTYPES.FREE_TEXT}>Freitext</option>\r\n                <option value={WORDTYPES.VERB}>Verb</option>\r\n                <option value={WORDTYPES.NOUN}>Substantiv</option>\r\n                <option value={WORDTYPES.ADJECTIVE}>Adjektiv</option>\r\n            </select>\r\n            <div/>\r\n            <div className={\"index-card \" + wordtype.toLowerCase()}>\r\n                <div className=\"index-card edit german\">\r\n                    <label>Wort/Phrase:</label><input value={german} ref={ref => this.focusInput = ref}\r\n                                                      onChange={ev => this.setState({german: ev.target.value})}/>\r\n                </div>\r\n                <hr/>\r\n                <SwedishComponent onChange={field => ev => this.handleChangeInSwedish(field, ev)}\r\n                                  data={swedish}\r\n                />\r\n            </div>\r\n            <button onClick={this.autofill.bind(this)}>Automatisch befüllen</button>\r\n            <button onClick={() => this.setState({...this.defaultState})}>Zurücksetzen</button>\r\n        </div>\r\n    }\r\n}\r\n\r\n","import request from 'request'\r\n\r\nlet URL = process.env.REACT_APP_API_URL + \"/lecture/\"\r\nif (process.env.REACT_APP_API_URL.startsWith(\"/\"))\r\n    URL = document.location.origin + URL\r\n\r\nexport function get(onSuccess, onError=(() => null)) { // returns LectureEntityMeta: {name, description, id}\r\n    console.log(\"Fetching data from\", URL)\r\n    request(URL, function(error, response, body) {\r\n        if (error) {\r\n            return onError(error)\r\n        }\r\n        let statusCode = response.statusCode;\r\n        if (statusCode < 300 && statusCode >= 200) {\r\n            onSuccess(JSON.parse(body))\r\n        } else {\r\n            onError(body)\r\n        }\r\n    })\r\n}\r\n\r\nexport function getById(id, onSuccess, onError=(() => null)) { // returns lecture: {name, description, index_cards\r\n    const url = URL + id\r\n\r\n    console.log(\"Fetching data from\", url)\r\n\r\n    request(url, function(error, response, body) {\r\n        if (error) {\r\n            return onError(error)\r\n        }\r\n        let statusCode = response.statusCode;\r\n        if (statusCode < 300 && statusCode >= 200) {\r\n            let {index_cards, ...lecture} = JSON.parse(body)\r\n            onSuccess({...lecture, indexCards: index_cards})\r\n        } else {\r\n            onError(body)\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport function save(id, name, description, indexCards, onSuccess, onError) {\r\n    let url = URL\r\n    if (id)\r\n        url += id\r\n\r\n    console.log(\"Fetching data from\", url)\r\n\r\n    let body = {name, description, index_cards: indexCards}\r\n\r\n    request.post({url, body: JSON.stringify(body), headers: {\"Content-Type\": \"text/plain\"}}, function(error, response, body) {\r\n        if (error) {\r\n            return onError(error)\r\n        }\r\n        let statusCode = response.statusCode;\r\n        if (statusCode < 300 && statusCode >= 200) {\r\n            onSuccess(body)\r\n        } else {\r\n            onError(body)\r\n        }\r\n    })\r\n}\r\n\r\n","import {getEditComponentByWordtype} from \"../../util/IndexCardUtil\";\r\nimport React from \"react\";\r\n\r\nexport const IndexCardSmall = ({german, swedish, wordtype, isFocused, onClick, onClickDelete}) => <div\r\n    className={\"index-card \" + wordtype.toLowerCase() + \" small\" + (isFocused ? \" focused\" : \"\")}\r\n    tabIndex={1} onClick={onClick}\r\n>\r\n    <div><p>{german}</p></div>\r\n    <hr/>\r\n    <div><p>{swedish[getEditComponentByWordtype(wordtype).IDENTIFIER]}</p></div>\r\n    <span className={\"delete-overlay\"} onClick={onClickDelete}>\r\n        <span className={\"glyphicon glyphicon-remove\"}/>\r\n    </span>\r\n</div>","import React from 'react'\r\n\r\nclass StickyNavigation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {collapsed: false}\r\n    }\r\n\r\n    render() {\r\n        const {collapsed} = this.state\r\n        const {children} = this.props\r\n\r\n        return <div className={\"sticky-navigation \" + (collapsed ? \"collapsed\" : \"expanded\")}>\r\n\r\n            <div className={\"collapse-container\"}>\r\n                {children}\r\n            </div>\r\n\r\n            <span onClick={() => this.setState({collapsed: !collapsed})}/>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default StickyNavigation","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {IndexCardEdit} from \"./indexcards/IndexCardEdit\";\r\nimport {save, getById} from \"../repository/lectureRepository\";\r\nimport {withRouter} from \"react-router\";\r\nimport {cardIsEmpty} from \"../util/IndexCardUtil\";\r\nimport {IndexCardSmall} from \"./indexcards/IndexCardSmall\";\r\nimport StickyNavigation from \"./StickyNavigation\";\r\n\r\nclass LectureEdit extends React.Component {\r\n    // currentId is not in state because it should not issue an rerender\r\n    currentId = null\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {currentIndexCard: 0, successful: null}\r\n    }\r\n\r\n    getLectureId = (props=this.props) => props.match.params.lectureId || null\r\n\r\n    componentDidMount() {\r\n        this.currentId = this.getLectureId()\r\n        if (this.currentId) {\r\n            getById(this.currentId, ({name, description, indexCards}) => {\r\n                this.nameInput.value = name\r\n                this.descriptionInput.value = description\r\n                this.props.loadIndexCards(indexCards)\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        let currentNumIndexCards = this.props.indexCards.length;\r\n        let previousNumIndexCards = prevProps.indexCards.length;\r\n\r\n        if (previousNumIndexCards < currentNumIndexCards)\r\n            this.setState({currentIndexCard: currentNumIndexCards - 1})\r\n        else if (previousNumIndexCards > currentNumIndexCards)\r\n            this.setState({currentIndexCard: Math.min(currentNumIndexCards - 1, this.state.currentIndexCard)})\r\n\r\n        if (this.getLectureId(prevProps) !== this.getLectureId())\r\n            this.currentId = this.getLectureId()\r\n    }\r\n\r\n    onAddCard() {\r\n        window.scrollTo({top: 0})\r\n        this.props.addIndexCard()\r\n    }\r\n\r\n    onSaveSuccess(body) {\r\n        if (this.currentId === null) {\r\n            this.currentId = body\r\n            this.props.history.push(\"/lecture/\" + body)\r\n        }\r\n\r\n        getById(this.currentId, ({name, description, indexCards}) => {\r\n            this.nameInput.value = name\r\n            this.descriptionInput.value = description\r\n            this.props.loadIndexCards(indexCards)\r\n        })\r\n\r\n        this.setState({successful: true},\r\n            () => setTimeout(() => this.setState({successful: null}), 5000))\r\n    }\r\n\r\n    onSaveFailure(body) {\r\n        console.error(\"Error on saving lecture:\", body)\r\n\r\n        this.setState({successful: false},\r\n            () => setTimeout(() => this.setState({successful: null}), 5000))\r\n    }\r\n\r\n    saveLecture() {\r\n        save(this.currentId,\r\n            this.nameInput.value, this.descriptionInput.value, this.props.indexCards.filter(it => !cardIsEmpty(it)),\r\n            this.onSaveSuccess.bind(this), this.onSaveFailure.bind(this))\r\n    }\r\n\r\n    goBackToOverview() {\r\n        this.props.resetIndexCards()\r\n        this.props.history.push(\"/\")\r\n    }\r\n\r\n    render() {\r\n        const {indexCards, updateIndexCard, deleteIndexCard} = this.props;\r\n        const {currentIndexCard, successful} = this.state\r\n\r\n        let saveButtonBackgroundColor\r\n        if (successful !== null) {\r\n            if (successful)\r\n                saveButtonBackgroundColor = \"lightgreen\"\r\n            else\r\n                saveButtonBackgroundColor = \"#faa\"\r\n        } else\r\n            saveButtonBackgroundColor = null\r\n\r\n        console.log(\"SaveButtonOutline:\", saveButtonBackgroundColor)\r\n\r\n        return <div>\r\n            <StickyNavigation>\r\n                <button style={{background: saveButtonBackgroundColor}} onClick={this.saveLecture.bind(this)}>Lektion speichern</button>\r\n                <button onClick={this.goBackToOverview.bind(this)}>Zurück zur Übersicht</button>\r\n            </StickyNavigation>\r\n            <div style={{display: \"grid\", gridTemplateColumns: \"1fr 10fr\", marginBottom: \"24px\", marginTop: \"24px\"}}>\r\n                <label>Name der Lektion </label><input ref={ref => this.nameInput = ref}/>\r\n                <label>Beschreibung (optional)</label><textarea ref={ref => this.descriptionInput = ref}/>\r\n            </div>\r\n            <div className={\"lecture current-index-card\"}>\r\n                <IndexCardEdit {...indexCards[currentIndexCard]} key={currentIndexCard + indexCards.length}\r\n                               update={updateIndexCard(currentIndexCard)}\r\n                               onSave={this.onAddCard.bind(this)}\r\n                />\r\n            </div>\r\n            <div className={\"lecture index-cards\"}>\r\n                {\r\n                    indexCards.map((indexCard, index) =>\r\n                        <IndexCardSmall onClick={() => this.setState({currentIndexCard: index},\r\n                            () => window.scrollTo({top: 0, behavior: \"smooth\"}))}\r\n                                        onClickDelete={deleteIndexCard(index)}\r\n                                        isFocused={index === currentIndexCard}\r\n                                        {...indexCards[index]}\r\n                                        key={index}\r\n                        />\r\n                    )\r\n                }\r\n                <div className={\"add-index-card\"} onClick={this.onAddCard.bind(this)}>\r\n                    <span className=\"glyphicon glyphicon-plus\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    indexCards: state.indexCards\r\n})\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addIndexCard: () => dispatch({type: \"ADD_INDEX_CARD\"}),\r\n    deleteIndexCard: (index) => () => dispatch({type: \"DELETE_INDEX_CARD\", index}),\r\n    updateIndexCard: (index) => (data) => dispatch({type: \"UPDATE_INDEX_CARD\", index, data}),\r\n    loadIndexCards: (indexCards) => dispatch({type: \"LOAD_INDEX_CARDS\", indexCards}),\r\n    resetIndexCards: () => dispatch({type: \"RESET_INDEX_CARDS\"})\r\n})\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(LectureEdit))","import _ from 'lodash'\r\nimport {WORDTYPES} from \"../util/IndexCardUtil\";\r\n\r\nconst DEFAULT_INDEX_CARD = {german: \"\", wordtype: WORDTYPES.FREE_TEXT, swedish: {value: \"\"}, id: \"\"}\r\n\r\nconst defaultState = {\r\n    indexCards: [DEFAULT_INDEX_CARD]\r\n}\r\n\r\nconst lectureReducer = (state=defaultState, action={}) => {\r\n    let newState = _.cloneDeep(state)\r\n\r\n    const {type, index, data, indexCards} = action\r\n\r\n    switch (type) {\r\n        case \"ADD_INDEX_CARD\":\r\n            newState.indexCards.push(_.cloneDeep(DEFAULT_INDEX_CARD))\r\n            break\r\n        case \"UPDATE_INDEX_CARD\":\r\n            newState.indexCards[index] = data\r\n            break\r\n        case \"DELETE_INDEX_CARD\":\r\n            newState.indexCards.splice(index, 1)\r\n            break\r\n        case \"LOAD_INDEX_CARDS\":\r\n            newState.indexCards = _.cloneDeep(indexCards)\r\n            break\r\n        case \"RESET_INDEX_CARDS\":\r\n            newState.indexCards = [_.cloneDeep(DEFAULT_INDEX_CARD)]\r\n            break\r\n        default:\r\n            break;\r\n    }\r\n    return newState\r\n}\r\nexport default lectureReducer","import React from 'react'\r\nimport {get} from '../repository/lectureRepository'\r\nimport {withRouter} from \"react-router\";\r\n\r\nconst LectureMeta = ({name, description, onClickEdit, onClickStart}) => <div className={\"lecture-meta\"}>\r\n    <div>\r\n        <div>{name}</div>\r\n        <div>{description}</div>\r\n    </div>\r\n    <div className={\"lecture-meta buttongroup\"}>\r\n        <button onClick={onClickStart}>Lektion starten</button>\r\n        <button onClick={onClickEdit}>Editieren</button>\r\n    </div>\r\n</div>\r\n\r\nclass LectureOverview extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {lectures: []}\r\n    }\r\n\r\n    snackMeta = {name: \"Snack: 20\", description: \"20 zufällige Vokabeln aus allen Lektionen.\", id: \"snack\"}\r\n\r\n    componentDidMount() {\r\n        get(this.loadLectures.bind(this),\r\n            (errorBody) => console.error(\"ERROR:\", errorBody))\r\n    }\r\n\r\n    loadLectures(lectureMetas) {\r\n        if (lectureMetas.length > 0) {\r\n            this.setState({lectures: [this.snackMeta, ...lectureMetas]})\r\n        }\r\n    }\r\n\r\n    onClickEdit = (lectureMeta) => () => this.props.history.push(\"/lecture/\" + lectureMeta.id)\r\n    onClickStart = (lectureMeta) => () => this.props.history.push(\"/quiz/yesno/\" + lectureMeta.id)\r\n\r\n    render() {\r\n        const {lectures} = this.state\r\n        return <div className={\"lecture-overview\"}>\r\n            <div>Lektionen</div>\r\n            <div className={\"lecture-meta\"}>\r\n                <button onClick={() => this.props.history.push(\"/lecture\")}>Lektion hinzufügen</button>\r\n            </div>\r\n            {\r\n                lectures.map((metaInfo, i) => <LectureMeta {...metaInfo} key={i}\r\n                                                           onClickEdit={this.onClickEdit(metaInfo)}\r\n                                                           onClickStart={this.onClickStart(metaInfo)}/>)\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default withRouter(LectureOverview)","import React from \"react\";\r\n\r\nclass Swipeable extends React.Component {\r\n\r\n    onTouchStart(ev) {\r\n        this.touchDownX = ev.touches[0].screenX\r\n        this.props.onTouchStart(ev)\r\n    }\r\n\r\n    onTouchEnd(ev) {\r\n        let touchUp = ev.changedTouches[0].screenX\r\n        if (this.touchDownX !== null && Math.abs(touchUp - this.touchDownX) > 50) {\r\n            if (touchUp > this.touchDownX) //swipe right\r\n                this.props.onSwipeRight()\r\n            else\r\n                this.props.onSwipeLeft()\r\n    }\r\n        this.props.onTouchEnd(ev)\r\n    }\r\n\r\n    render() {\r\n        const {children, className, onTouchStart, onTouchEnd, onSwipeRight, onSwipeLeft, ...givenProps} = this.props\r\n        return <div onTouchStart={this.onTouchStart.bind(this)} onTouchEnd={this.onTouchEnd.bind(this)}\r\n                    className={className + \" swipeable\"} {...givenProps}>\r\n            {children}\r\n        </div>\r\n    }\r\n}\r\n\r\nSwipeable.defaultProps = {\r\n    onSwipeRight: () => null,\r\n    onSwipeLeft: () => null,\r\n    onTouchStart: () => null,\r\n    onTouchEnd: () => null\r\n}\r\nexport default Swipeable","import {getDisplayComponentByWordtype} from \"../../util/IndexCardUtil\";\r\nimport React from \"react\";\r\n\r\nexport const IndexCardQuiz = ({quiztype, german, wordtype, swedish, onClick, onClickDelete}) => {\r\n    const SwedishComponent = getDisplayComponentByWordtype(wordtype)\r\n    return <div\r\n        className={\"index-card \" + wordtype.toLowerCase() + \" quiz \" + quiztype}\r\n        tabIndex={1} onClick={onClick}\r\n    >\r\n        <div><p>{german}</p></div>\r\n        <hr/>\r\n        <SwedishComponent data={swedish} key={\"swedish\"}/>\r\n    </div>\r\n}","import React from 'react'\r\nimport {getById} from \"../../repository/lectureRepository\";\r\nimport _ from 'lodash'\r\nimport Swipeable from \"../Swipeable\";\r\nimport {IndexCardQuiz} from \"../indexcards/IndexCardQuiz\";\r\nimport {sendResult} from \"../../repository/lectureResultRepository\";\r\n\r\nconst YesNoQuizResult = ({correct, wrong, className, redoQuiz, goBack, ...props}) => <div {...props}\r\n                                                                                  className={className}>\r\n    <div className={\"quiz yesno result\"}>\r\n        <div>Richtig:</div>\r\n        <div>{correct.length}</div>\r\n        <div>Falsch:</div>\r\n        <div>{wrong.length}</div>\r\n        <hr/>\r\n        <hr/>\r\n        <div>Ergebnis:</div>\r\n        <div>{parseInt(100 * correct.length / (correct.length + wrong.length))}%</div>\r\n        <button onClick={() => redoQuiz([...correct, ...wrong])}>\r\n            Alle wiederholen\r\n        </button>\r\n        <button onClick={() => redoQuiz(wrong)}>\r\n            Fehler wiederholen\r\n        </button>\r\n        <button style={{gridColumnStart: 1, gridColumnEnd: 3, width: \"100%\"}} onClick={goBack}>\r\n            Zurück zur Übersicht\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\nclass YesNoQuiz extends React.Component {\r\n    state = {unfinished: [], isTurned: false, correct: [], wrong: []}\r\n\r\n    componentDidMount() {\r\n        this.newRound(this.props.indexCards)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const {unfinished, correct, wrong} = this.state\r\n        if (unfinished.length === 0 && (correct.length + wrong.length) !== 0)\r\n            sendResult(wrong, correct)\r\n    }\r\n\r\n    newRound(indexCards) {\r\n        this.setState({\r\n            unfinished: _.shuffle(_.cloneDeep(indexCards)),\r\n            isTurned: false, correct: [], wrong: []\r\n        })\r\n    }\r\n\r\n    onKeyDown(ev) {\r\n        switch (ev.key) {\r\n            case \"ArrowLeft\":\r\n                ev.preventDefault()\r\n                return this.nextCard(false)\r\n            case \"ArrowRight\":\r\n                ev.preventDefault()\r\n                return this.nextCard(true)\r\n            case \"Enter\":\r\n                ev.preventDefault()\r\n                return this.turnCard()\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    turnCard() {\r\n        const {isTurned} = this.state\r\n        if (!isTurned) {\r\n            this.setState({isTurned: true})\r\n        }\r\n    }\r\n\r\n    nextCard(wasRight) { // boolean\r\n        if (!this.state.isTurned) // safety first\r\n            return\r\n\r\n        const [currentCard, ...unfinished] = this.state.unfinished\r\n        if (wasRight) {\r\n            this.setState({unfinished, correct: [...this.state.correct, currentCard], isTurned: false})\r\n        } else {\r\n            this.setState({unfinished, wrong: [...this.state.wrong, currentCard], isTurned: false})\r\n        }\r\n    }\r\n\r\n    onTouchDown(ev) {\r\n        if (ev.target.classname === \"sticky-navigation\") {\r\n            console.log(\"AAAAHA!\")\r\n        } else\r\n            this.turnCard()\r\n    }\r\n\r\n    render() {\r\n        const {unfinished, isTurned, correct, wrong} = this.state\r\n\r\n        if (!unfinished.length)\r\n            return <div className={\"quiz yesno root \"}>\r\n                <YesNoQuizResult correct={correct} wrong={wrong} redoQuiz={this.newRound.bind(this)}\r\n                    goBack={() => window.location = \"/\"/*TODO: make push to history*/}\r\n                />\r\n            </div>\r\n\r\n        return <Swipeable tabIndex={1}\r\n                          id={\"foobarbaz\"}\r\n                          onClick={() => document.getElementById(\"foobarbaz\").focus()}\r\n                          className={\"quiz yesno root\"}\r\n                          onKeyDown={this.onKeyDown.bind(this)}\r\n                          onSwipeRight={() => this.nextCard(true)}\r\n                          onSwipeLeft={() => this.nextCard(false)}\r\n                          onTouchStart={this.onTouchDown.bind(this)}>\r\n            <div className={\"quiz yesno current-card\" + (!isTurned ? \" unturned\" : \"\")}>\r\n                <div onClick={this.turnCard.bind(this)}>\r\n                    <IndexCardQuiz {...unfinished[0]} quiztype={\"yesno\"}/>\r\n                </div>\r\n                <div className={\"buttongroup\"}>\r\n                    <button onClick={() => this.nextCard(false)}>Wusste ich nicht</button>\r\n                    <button onClick={() => this.nextCard(true)}>Wusste ich</button>\r\n                </div>\r\n            </div>\r\n            <div className={\"sticky-navigation\"} >\r\n                <button onClick={() => this.setState({unfinished: [], wrong: [...wrong, ...unfinished]})}\r\n                        style={{float: \"right\"}}\r\n                >\r\n                    Quiz abbrechen\r\n                </button>\r\n            </div>\r\n        </Swipeable>\r\n    }\r\n}\r\n\r\nexport default class extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {loaded: false, data: []}\r\n    }\r\n\r\n    componentDidMount() {\r\n        const lectureId = this.props.match.params.lectureId\r\n        getById(lectureId, (body) => this.setState({data: body.indexCards, loaded: true}))\r\n    }\r\n\r\n    render() {\r\n        const {loaded, data} = this.state\r\n        if (loaded)\r\n            return <YesNoQuiz indexCards={data}/>\r\n        else\r\n            return <Swipeable>Loading...</Swipeable>\r\n    }\r\n}","export function sendResult(wrong, correct) {\r\n    if (wrong.length === 0 && correct.length === 0)\r\n        console.log(\"Empty result to send; doing nothing.\")\r\n    fetch(process.env.REACT_APP_API_URL + /result/, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({wrong, correct})\r\n    })\r\n        .then(() => console.log(\"Send result.\"))\r\n        .catch(error => console.error(\"Error send results:\", error))\r\n}","import React from 'react';\nimport './App.css';\nimport Lecture from \"./components/LectureEdit\";\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport lectureReducer from \"./domain/lectureReducer\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Route, Switch} from \"react-router\";\nimport LectureOverview from \"./components/LectureOverview\";\nimport YesNoQuiz from \"./components/quiz/YesNoQuiz\";\n\nfunction App() {\n\n    return (\n        <Provider className=\"App\" store={createStore(lectureReducer,\n            window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())}>\n            <BrowserRouter>\n                <Switch>\n                    <Route path={\"/lecture/:lectureId?\"} component={Lecture}/>\n                    <Route path={\"/quiz/yesno/:lectureId\"} component={YesNoQuiz}/>\n                    <Route path={\"/\"} component={LectureOverview}/>\n                </Switch>\n            </BrowserRouter>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}